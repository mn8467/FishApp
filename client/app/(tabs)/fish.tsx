import React, { useMemo, useState, useRef, useEffect } from "react";
import { View, Text, TextInput, FlatList, Image, Pressable, StyleSheet, Dimensions, Animated } from "react-native"; // ‚úÖ ÏàòÏ†ï: SafeAreaView Ï†úÍ±∞(ÎØ∏ÏÇ¨Ïö©)
import { Ionicons, Feather } from "@expo/vector-icons";
import { SafeAreaProvider } from "react-native-safe-area-context";
import axios from "axios";
import { useRouter } from "expo-router"; // ‚úÖ ÏàòÏ†ï: ÎùºÏö∞ÌåÖÏùÑ ÏúÑÌï¥ Ï∂îÍ∞Ä

type Fish = {
  fishId: string;
  fishName: string;
  imageUri: string;
};

// (ÎçîÎØ∏Îç∞Ïù¥ÌÑ∞ Ï†úÍ±∞ Ïú†ÏßÄ)

const AnimatedPressable = Animated.createAnimatedComponent(Pressable);

// ‚úÖ ÏàòÏ†ï: ÏÉÅÏÑ∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥ÎèôÌï† Ïàò ÏûàÎèÑÎ°ù onPressÎ•º Ï£ºÏûÖÎ∞õÍ≤å Î≥ÄÍ≤Ω
function FishItem({ item, size, onPress }: { item: Fish; size: number; onPress: () => void }) {
  const scale = useRef(new Animated.Value(1)).current;

  const onPressIn = () => {
    Animated.spring(scale, {
      toValue: 0.9,
      useNativeDriver: true,
      friction: 5,
      tension: 150,
    }).start();
  };

  const onPressOut = () => {
    Animated.spring(scale, {
      toValue: 1,
      useNativeDriver: true,
      friction: 5,
      tension: 150,
    }).start();
  };

  return (
    <AnimatedPressable
      onPressIn={onPressIn}
      onPressOut={onPressOut}
      onPress={onPress} // ‚úÖ ÏàòÏ†ï: ÏïÑÏù¥ÌÖú ÌÑ∞Ïπò Ïãú Î∂ÄÎ™®ÏóêÏÑú ÎÑòÍ∏¥ Ìï∏Îì§Îü¨ Ïã§Ìñâ
      style={[styles.cell, { width: size, transform: [{ scale }] }]}
    >
      <View style={[styles.circle, { width: size, height: size, borderRadius: size / 2 }]}>
        {item.imageUri ? <Image source={{ uri: item.imageUri }} style={styles.image} /> : null}
      </View>
      <Text style={styles.caption} numberOfLines={1}>
        {item.fishName /* name ‚Üí fishName Ïú†ÏßÄ */}
      </Text>
    </AnimatedPressable>
  );
}

export default function Home() {
  const router = useRouter(); // ‚úÖ ÏàòÏ†ï: ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÌõÖ
  const [query, setQuery] = useState("");
  const [fishes, setFishes] = useState<Fish[]>([]);
  const CURRENT_HOST = process.env.EXPO_PUBLIC_CURRENT_HOST;
  const HOST = CURRENT_HOST || "localhost"; // ‚úÖ ÏàòÏ†ï: ÌôòÍ≤ΩÎ≥ÄÏàò ÎØ∏ÏÑ§Ï†ï Ïãú ÏïàÏ†ÑÌïú Í∏∞Î≥∏Í∞í

  // ÏÑúÎ≤ÑÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞
  useEffect(() => {
    const fetchFishes = async () => {
      try {
        const res = await axios.get(`http://${HOST}:8080/api/fish/data`); // ‚úÖ ÏàòÏ†ï: HOST ÏÇ¨Ïö©
        const mapped: Fish[] = res.data.map((f: any) => ({
          fishId: f.fishId,
          fishName: f.fishName,
          imageUri: f.imageUrl ?? "", // Îπà Î¨∏ÏûêÏó¥ Í∏∞Î≥∏Í∞í
                                      // Url(Ïù¥ÎØ∏ÏßÄ) ÏóÜÏùÑ Í≤ΩÏö∞  WARN  source.uri should not be an empty string ÎîîÎ≤ÑÍπÖ Îú∏
        }));
        setFishes(mapped);
      } catch (err) {
        console.error("üêü Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:", err);
      }
    };

    fetchFishes();
  }, [HOST]); // ‚úÖ ÏàòÏ†ï: HOST Î≥ÄÍ≤Ω Ïãú Ïû¨ÏöîÏ≤≠

  const filtered = useMemo(() => {
    const q = query.trim().toLowerCase();
    return q ? fishes.filter((f) => f.fishName.toLowerCase().includes(q)) : fishes;
  }, [query, fishes]);

  const { width } = Dimensions.get("window");
  const padding = 16,
    gap = 12,
    columns = 4;
  const itemSize = Math.floor((width - padding * 2 - gap * (columns - 1)) / columns);

  // ‚úÖ ÏàòÏ†ï: renderItemÏóêÏÑú Í∞Å ÏïÑÏù¥ÌÖúÏùÑ ÎàÑÎ•¥Î©¥ ÏÉÅÏÑ∏Î°ú Ïù¥ÎèôÌïòÎèÑÎ°ù Íµ¨ÌòÑ
  const renderItem = ({ item }: { item: Fish }) => (
    <FishItem
      item={item}
      size={itemSize}
      onPress={() =>
        router.push({
          pathname: "/fish/[fishId]", // ÎèôÏ†Å ÎùºÏö∞Ìä∏
          params: { fishId: item.fishId }, // ‚úÖ ÏàòÏ†ï: ÌååÎùºÎØ∏ÌÑ∞Î°ú fishId Ï†ÑÎã¨
        })
      }
    />
  );

  return (
    <SafeAreaProvider style={styles.wrap}>
      {/* Í≤ÄÏÉâÎ∞î */}
      <View style={styles.searchBox}>
        <Ionicons name="search" size={18} color="#9AA0A6" style={{ marginRight: 8 }} />
        <TextInput
          placeholder="Í≤ÄÏÉâ"
          placeholderTextColor="#9AA0A6"
          value={query}
          onChangeText={setQuery}
          style={styles.searchInput}
          clearButtonMode="while-editing"
        />
      </View>

      {/* Ïπ©Îì§ */}
      <View style={styles.chipsRow}>
        <Chip icon={<Ionicons name="heart-outline" size={16} />} label="Ï¶êÍ≤®Ï∞æÍ∏∞" />
        <Chip icon={<Ionicons name="time-outline" size={16} />} label="Í∏∞Î°ù" />
        <Chip icon={<Feather name="file-text" size={16} />} label="Ï£ºÎ¨∏" />
      </View>

      {/* ÏÑπÏÖò Ìó§Îçî */}
      <View style={styles.sectionHeader}>
        <Text style={styles.sectionTitle}>Ï†úÎ™©</Text>
        <Ionicons name="chevron-forward" size={18} color="#111" />
      </View>

      <FlatList
        data={filtered}
        keyExtractor={(i) => i.fishId} // fishIdÎ°ú key Ïú†ÏßÄ
        renderItem={renderItem}
        numColumns={4}
        contentContainerStyle={{ paddingHorizontal: 16, paddingTop: 8, paddingBottom: 80 }}
        columnWrapperStyle={{ gap }}
        ItemSeparatorComponent={() => <View style={{ height: gap }} />}
        showsVerticalScrollIndicator={false}
      />
    </SafeAreaProvider>
  );
}

function Chip({ icon, label, onPress }: { icon: React.ReactNode; label: string; onPress?: () => void }) {
  return (
    <Pressable onPress={onPress} style={styles.chip}>
      <View style={{ flexDirection: "row", alignItems: "center", gap: 6 }}>
        {icon}
        <Text style={styles.chipTxt}>{label}</Text>
      </View>
    </Pressable>
  );
}

const styles = StyleSheet.create({
  wrap: { flex: 1, backgroundColor: "#fff" },
  searchBox: {
    marginHorizontal: 16,
    height: 40,
    borderRadius: 10,
    backgroundColor: "#F2F3F5",
    flexDirection: "row",
    alignItems: "center",
    paddingHorizontal: 12,
    marginBottom: 10,
  },
  searchInput: { flex: 1, fontSize: 15 },
  chipsRow: { flexDirection: "row", gap: 8, paddingHorizontal: 16, marginBottom: 8 },
  chip: {
    borderWidth: StyleSheet.hairlineWidth,
    borderColor: "#DADCE0",
    borderRadius: 18,
    paddingHorizontal: 10,
    paddingVertical: 6,
    backgroundColor: "#fff",
  },
  chipTxt: { fontSize: 13, color: "#111" },
  sectionHeader: {
    flexDirection: "row",
    alignItems: "center",
    paddingHorizontal: 16,
    marginTop: 8,
    marginBottom: 8,
  },
  sectionTitle: { fontSize: 18, fontWeight: "700", marginRight: 4 },
  cell: { alignItems: "center" },
  circle: { backgroundColor: "#F5F5F7", overflow: "hidden", alignItems: "center", justifyContent: "center" },
  image: { width: "100%", height: "100%" },
  caption: { marginTop: 6, fontSize: 12, color: "#111" },
});
